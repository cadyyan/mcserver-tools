#!/usr/bin/env python

"""
Command line script for working with a Minecraft server
"""

from __future__ import print_function

import argparse

import mcserver

def print_verbose(args, format, *vargs, **kwargs):
	if not args.is_verbose:
		return

	print(format.format(*vargs, **kwargs))

def handler_start_server(args):
	"""
	Start the Minecraft server
	"""

	is_daemon = None
	if args.is_daemon or args.no_daemon:
		is_daemon = args.is_daemon

	server = mcserver.Server(args.server_dir)
	server.start(
		is_daemon = is_daemon,
		uid       = args.uid,
		gid       = args.gid,
	)

def handler_stop_server(args):
	"""
	Stop the Minecraft server
	"""

	server = mcserver.Server(args.server_dir)
	server.stop()

def handler_restart_server(args):
	"""
	Restart the Minecraft server
	"""

	is_daemon = None
	if args.is_daemon or args.no_daemon:
		is_daemon = args.is_daemon

	server = mcserver.Server(args.server_dir)
	server.start(
		is_daemon = is_daemon,
		uid       = args.uid,
		gid       = args.gid,
	)

def add_command(name, parser, handler):
	"""
	Add command line command
	"""

	# TODO: there needs to be a way to add a help message

	command_parser = parser.add_parser(name)

	command_parser.add_argument('--dir', '-d',
								dest = 'server_dir',
								type = str,
								default = '.',
								help = 'The server directory. Defaults to current directory')

	command_parser.add_argument('--verbose', '-v',
								dest = 'is_verbose',
								action = 'store_true',
								help = 'Make output more berbose')

	command_parser.set_defaults(func = handler)

	return command_parser

def get_command_args():
	"""
	Get the command line arguments
	"""

	parser = argparse.ArgumentParser(
		description = 'Command line manager for Minecraft Servers')

	subparsers = parser.add_subparsers(title = 'Command')

	start_parser = add_command('start', subparsers, handler_start_server)
	daemon_group = start_parser.add_argument_group(title = 'Daemon options')
	daemon_group.add_argument('--daemon',
							  dest   = 'is_daemon',
							  action = 'store_true',
							  help   = 'Start the server as a daemon')
	daemon_group.add_argument('--no-daemon',
							  dest   = 'no_daemon',
							  action = 'store_true',
							  help   = 'Start the server not as a daemon')
	start_parser.add_argument('--user',
							  dest = 'uid',
							  type = int,
							  help = 'The effective user to run the server as')
	start_parser.add_argument('--group',
							  dest = 'gid',
							  type = int,
							  help = 'The effective group to run the server as')

	stop_parser = add_command('stop', subparsers, handler_stop_server)

	restart_parser = add_command('restart', subparsers, handler_restart_server)
	daemon_group = restart_parser.add_argument_group(title = 'Daemon options')
	daemon_group.add_argument('--daemon',
							dest = 'is_daemon',
							action = 'store_true',
							help = 'Start the server as a daemon')
	daemon_group.add_argument('--no-daemon',
							dest   = 'no_daemon',
							action = 'store_true',
							help   = 'Start the server not as a daemon')
	restart_parser.add_argument('--user',
							dest = 'uid',
							type = str,
							help = 'The effective user to run the server as')
	restart_parser.add_argument('--group',
							dest = 'gid',
							type = str,
							help = 'The effective group to run the server as')

	return parser.parse_args()

def main():
	"""
	Main method of the script
	"""

	args = get_command_args()

	try:
		args.func(args)
	except mcserver.MCServerError as ex:
		print(ex.message)
		exit(1)

if __name__ == '__main__':
	main()
